package scheme

import (
	"github.com/twolodzko/gosch/eval"
	"github.com/twolodzko/gosch/macros"
	"github.com/twolodzko/gosch/types"
)

var Procedures = eval.ProceduresGetter{
	"-":             Dif,
	"->float":       ToFloat,
	"->int":         ToInt,
	"*":             Mul,
	"/":             Div,
	"//":            IntDiv,
	"%":             Mod,
	"+":             Sum,
	"<":             Lower,
	"=":             Equal,
	">":             Greater,
	"and":           And,
	"begin":         Begin,
	"boolean?":      IsBool,
	"car":           Car,
	"cdr":           Cdr,
	"cond":          Cond,
	"cons":          Cons,
	"debug":         Debug,
	"define-syntax": macros.DefineSyntax,
	"define":        Define,
	"display":       Display,
	"do":            Do,
	"else":          types.TRUE,
	"eq?":           Eq,
	"error":         Error,
	"eval":          Eval,
	"expand-macro":  macros.ExpandMacro,
	"float?":        IsFloat,
	"gensym":        macros.Gensym,
	"go":            Go,
	"if":            If,
	"integer?":      IsInteger,
	"lambda":        NewLambda,
	"let":           Let,
	"list->vector":  ListToVector,
	"list":          List,
	"load":          Load,
	"make-vector":   MakeVector,
	"map":           Map,
	"nil?":          IsNil,
	"not":           Not,
	"null?":         IsNull,
	"number?":       IsNumber,
	"or":            Or,
	"pair?":         IsPair,
	"procedure?":    IsProcedure,
	"quasiquote":    Quasiquote,
	"quote":         Quote,
	"set!":          Set,
	"string-length": StringLength,
	"string?":       IsString,
	"string":        ToString,
	"substring":     Substring,
	"symbol?":       IsSymbol,
	"syntax-rules":  macros.NewSyntaxRules,
	"timeit":        Timeit,
	"unquote":       Unquote,
	"vector->list":  VectorToList,
	"vector-length": VectorLength,
	"vector-ref":    VectorRef,
	"vector-set!":   VectorSet,
	"vector?":       IsVector,
	"vector":        Vector,
	"macro":         NewMacro,
	"define-macro":  DefineMacro,
}
